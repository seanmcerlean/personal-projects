from __future__ import division

import math
import operator
from itertools import izip

from PIL import Image


class ImageCompare:
    """
    Allows comparison of two images
    """
    ROBOT_LIBRARY_SCOPE = 'TEST CASE'

    def __init__(self):
        pass

    def compare_image_files(self, fname1, fname2, algorithm="pixel"):
        """
        Compare two image files and return how similar they are between 0 and 1
        :param fname1: Filename of image 1
        :param fname2: Filename of image 2
        :param algorithm: Algorithm to use to compare
                          pixel:     Compares the distance between each pixel, then flattens the result.
                                     Returns a value between 0 (identical) and 100.0 (completely different)
                          histogram: Calculate the mean square distance between the histograms generated by PIL
                                     Returns a positive number where 0 means the images are identical and higher values
                                     indicate greater difference
        :return:
        """

        if fname1 == fname2:
            return 0

        try:
            first_image = Image.open(fname1)
            second_image = Image.open(fname2)

            if algorithm == 'pixel':
                return self._compare_images_pixel(first_image, second_image)
            elif algorithm == 'histogram':
                return self._compare_images_histogram(first_image, second_image)
            else:
                return 'Unsupported algorithm'
        except IOError:
            return 'Error reading one or more files'

    def _check_image_args(function):
        """
        Decorator to check image arguments entering a comparison function
        """
        def check_images(img1, img2):
            if img1 is None or img2 is None:
                return 'One or more images are empty'
            elif img1.mode != img2.mode:
                return 'Images are different modes'
            elif img1.size != img2.size:
                return 'Images are different sizes'

            return function(img1, img2)

        return check_images

    @staticmethod
    @_check_image_args
    def _compare_images_pixel(im1, im2):
        """
        Compares two images by comparing the distance between each pixel, then flattening the result
        Source: https://rosettacode.org/wiki/Percentage_difference_between_images#Python
        :param im1: First Image In PIL format
        :param im2: Second image in PIL format
        :return: Difference between the images as a number between 0 and 100.0
        """
        pairs = izip(im1.getdata(), im2.getdata())

        if len(im1.getbands()) == 1:
            # for gray-scale jpegs
            dif = sum(abs(p1 - p2) for p1, p2 in pairs)
        else:
            dif = sum(abs(c1 - c2) for p1, p2 in pairs for c1, c2 in zip(p1, p2))

        ncomponents = im1.size[0] * im1.size[1] * 3

        return (dif / 255.0 * 100) / ncomponents

    @staticmethod
    @_check_image_args
    def _compare_images_histogram(im1, im2):
        """
        Compares two images by calculating the mean square distance between the histograms generated by PIL
        :param im1: First Image In PIL format
        :param im2: Second image in PIL format
        :return: Difference between the images as a float. 0 means the images are identical.
        Source: http://www.guguncube.com/1656/python-image-similarity-comparison-using-several-techniques
        """
        im1_hist = im1.histogram()
        im2_hist = im2.histogram()

        rms = math.sqrt(reduce(operator.add,  list(map(lambda a, b: (a - b)**2, im1_hist, im2_hist)))/len(im1_hist))
        return rms
